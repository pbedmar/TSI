{
    "hash": "wQdLTQZvUN",
    "versionDate": "2020-01-02T10:58:40.000Z",
    "files": {
        "MundoBloquesDom.pddl": "(define (domain blocksworld)\n    (:requirements :strips :typing)\n    (:types block)\n    (:predicates\n        (on ?x - block ?y - block)\n        (ontable ?x - block)\n        (clear ?x - block)\n        (handempty)\n        (holding ?x - block)\n    )\n\n    (:action pick_up\n        :parameters (?x - block)\n        :precondition\n            (and\n                (clear ?x)\n                (ontable ?x)\n                (handempty)\n            )\n        :effect\n            (and\n                (not (ontable ?x))\n                (not (clear ?x))\n                (not (handempty))\n                (holding ?x)\n            )\n    )\n\n    (:action put_down\n        :parameters (?x - block)\n        :precondition\n            (holding ?x)\n        :effect\n            (and\n                (not (holding ?x))\n                (clear ?x)\n                (handempty)\n                (ontable ?x)\n            )\n    )\n\n    (:action stack\n        :parameters (?x - block ?y - block)\n        :precondition\n            (and\n                (holding ?x)\n                (clear ?y)\n            )\n        :effect\n            (and\n                (not (holding ?x))\n                (not (clear ?y))\n                (clear ?x)\n                (handempty)\n                (on ?x ?y)\n            )\n    )\n    \n    (:action unstack\n        :parameters (?x - block ?y - block)\n        :precondition\n            (and\n                (on ?x ?y)\n                (clear ?x)\n                (handempty)\n            )\n        :effect\n            (and\n                (holding ?x)\n                (clear ?y)\n                (not (clear ?x))\n                (not (handempty))\n                (not (on ?x ?y))\n            )\n    )\n\n)",
        "MundoBloquesProb.pddl": "(define (problem BWp1)\n    (:domain blocksworld)\n    (:objects b1 b2 b3 b4 b5 - block)\n    (:init\n        ;Bloque 5 en la mano\n        (holding b5)\n        \n        ;El bloque 2 sobre el bloque 4, y bloque 3 sobre bloque 1\n        (on b2 b4)\n        (on b3 b1)\n        \n        ;En la mesa los bloques 4 y 1\n        (ontable b4)\n        (ontable b1)\n        \n        ;Y al descubierto los bloques 2 y 3\n        (clear b2)\n        (clear b3)\n\n    )\n    (:goal\n        (and\n            (on b3 b5)\n            (on b5 b2)\n            \n            (ontable b4)\n            (ontable b1)\n            (ontable b2)\n        )\n    )\n)",
        "MonoYPlatanosDom.pddl": "(define (domain mono)\n    (:requirements :strips :typing)\n    (:types\n        movible localizacion - object\n        mono caja - movible\n    )\n    (:predicates\n        (en ?obj - movible ?x - localizacion)\n        (tienePlatano ?m - mono)\n        (sobre ?m - mono ?c - caja)\n        (platanoEn ?x - localizacion)\n    )\n    \n    (:action cogerPlatanos\n        :parameters (?m - mono ?c - caja)\n        :precondition\n            (and\n                (sobre ?m ?c)\n            )\n        :effect\n            (and\n                (tienePlatano ?m)\n            )\n    )\n    \n)",
        "MonoYPlatanosProb.pddl": "(define (problem monosp1)\n    (:domain mono)\n    (:objects\n        mono1 - mono\n        caja1 - caja\n        localizacion1 localizacion2 localizacion3 - localizacion\n    )\n    (:init\n        (en caja1 localizacion2)\n        (platanoEn localizacion2)\n\n        (sobre mono1 caja1)\n    )\n    (:goal\n        (and\n            (tienePlatano mono1)\n        )\n    )\n)"
    },
    "plugins": {}
}